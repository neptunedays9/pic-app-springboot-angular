package com.pic.picapp.controller;

import com.pic.picapp.dao.SceneRepository;
import com.pic.picapp.dao.StoryRepository;
import com.pic.picapp.dao.UserRepository;
import com.pic.picapp.domain.Scene;
import com.pic.picapp.domain.Story;
import com.pic.picapp.domain.User;
import com.pic.picapp.util.*;
import java.lang.Iterable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;
import java. util. Iterator;

import com.pic.picapp.domain.Scene;
import com.pic.picapp.domain.Story;
import com.pic.picapp.domain.User;
import com.pic.picapp.util.SceneModel;
import com.pic.picapp.util.StoryModel;
import com.pic.picapp.dao.SceneRepository;
import com.pic.picapp.dao.StoryRepository;
import com.pic.picapp.dao.UserRepository;

import java.util.ArrayList;

@CrossOrigin(origins = {"http://localhost:4200", "http://localhost:8888", "http://localhost:8080"})
@RestController
@RequestMapping(path="/story") // This means URL's start with /demo (after Application path)
public class StoryController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private StoryRepository storyRepository;

    @Autowired
    private SceneRepository sceneRepository;

    //    @RequestMapping("/")
    //    public String index() {
    //        return "Greetings from Spring Boot!";
    //    }

    @GetMapping(path="/addUser") // Map ONLY GET Requests
    public @ResponseBody
    String addNewPic (@RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        //n.setId(Id);
        //n.setName(story);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = {"/{id}"})
    public @ResponseBody StoryModel getStory(@PathVariable("id") int id){
        System.out.println("PICAPP getStory");
        Story sto = storyRepository.findById(id).get();
        Iterable<Scene> scenes = sceneRepository.findByStoryId(sto.getId());

        //Preprae the models
        List<SceneModel> scenesModel = new ArrayList<SceneModel>();
        for (Scene sc : scenes) {
            SceneModel scm = new SceneModel();
            scm.setScene(sc.getScene());
            scenesModel.add(scm);
        }
        StoryModel storyModel = new StoryModel();
        storyModel.setTitle(sto.getTitle());
        storyModel.setScenes(scenesModel);
        return storyModel;
    }

        @GetMapping(path="/all")
    public @ResponseBody Iterable<StoryInfoModel> getAllPics() {
        // This returns a JSON or XML with the users
        Iterable<Story> stories = storyRepository.findAll();

        List<StoryInfoModel> list = new ArrayList<StoryInfoModel>();

        for (Story i : stories) {
            StoryInfoModel storyInfo = new StoryInfoModel();
            storyInfo.setId(i.getId());
            storyInfo.setTitle(i.getTitle());
            try {
                User user = userRepository.findById(i.getUserId()).get();
                storyInfo.setBy(user.getName());

            } catch (Exception e) {
                System.out.println("addStory userRepository.findByEmail");
                throw new RuntimeException(e);
            }
            list.add(storyInfo);
        }
        return list;
    }

    @PostMapping(path = "/add")
    public void addStory(@RequestBody StoryModel storyInput) {
        //code
        System.out.println("addStory" + storyInput.getTitle());

        Iterable<User> users;
        //get UserID corresponding to the email, if not error

        String email = storyInput.getEmail();
        try {
            users = userRepository.findByEmail(email);
        } catch (Exception e) {
            System.out.println("addStory userRepository.findByEmail");
            throw new RuntimeException(e);
        }

        long size = users.spliterator().getExactSizeIfKnown();
        System.out.println(size);

        Integer userId = 0;
        for (User u : users) {
            userId = u.getId();
        }
        System.out.println(userId);

        Story story = new Story();
        Date date = new Date();
        //story.setId(1);
        story.setDate(date);
        story.setTitle(storyInput.getTitle());
        story.setUserId(userId);
        System.out.println("userId" + story.getUserId());
        storyRepository.save(story);

        try {
            Scene scene = new Scene();
            Iterable<SceneModel> scenes = storyInput.getScenes();
            for (SceneModel s : scenes) {
                scene.setScene(s.getScene());
                scene.setStory(s.getStory());
                scene.setStoryId(story.getId());
                sceneRepository.save(scene);
            }
        } catch(Exception e){
            System.out.println("Get and Save Scenes");
            throw new RuntimeException(e);
        }
    }

    @PostMapping(path = "/{id}")
    public @ResponseBody void updateStory(@PathVariable("id") int id, @RequestBody StoryModel storyInput) {
        //code
        System.out.println("updateStory" + storyInput.getTitle());

        Story exStory = storyRepository.findById(id).get();
        exStory.setTitle(storyInput.getTitle());
        storyRepository.save(exStory);

        Iterable<Scene> exScenes = sceneRepository.findByStoryId(id);
        sceneRepository.deleteAll(exScenes);

        Iterable<SceneModel> inputScenes = storyInput.getScenes();

        try {
            Scene scene = new Scene();
            Iterable<SceneModel> scenes = storyInput.getScenes();
            for (SceneModel s : scenes) {
                scene.setScene(s.getScene());
                scene.setStory(s.getStory());
                scene.setStoryId(id);
                sceneRepository.save(scene);
            }
        } catch(Exception e){
            System.out.println("updateStory Scenes");
            throw new RuntimeException(e);
        }
    }
}
