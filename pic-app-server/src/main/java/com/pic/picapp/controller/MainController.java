package com.pic.picapp.controller;


import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import antlr.collections.List;

import com.pic.picapp.domain.Scene;
import com.pic.picapp.domain.Story;
import com.pic.picapp.domain.User;
import com.pic.picapp.util.SceneModel;
import com.pic.picapp.util.StoryModel;
import com.pic.picapp.dao.SceneRepository;
import com.pic.picapp.dao.StoryRepository;
import com.pic.picapp.dao.UserRepository;

@CrossOrigin(origins = {"http://localhost:4200", "http://localhost:8888", "http://localhost:8080"})
@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private StoryRepository storyRepository;

	@Autowired
	private SceneRepository sceneRepository;

//    @RequestMapping("/")
//    public String index() {
//        return "Greetings from Spring Boot!";
//    }
    
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewPic (@RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		//n.setId(Id);
		//n.setName(story);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

    @GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllPics() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}
